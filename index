<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solar Plant Revenue Calculator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
            background-color: #f4f4f4;
        }
        .container {
            max-width: 1200px; /* Increase container width */
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        h2 {
            text-align: center;
        }
        label {
            font-size: 16px;
            margin: 5px 0;
        }
        input[type="number"], input[type="text"] {
            width: 100%;
            padding: 10px 15px; /* Added padding to the left and right */
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            box-sizing: border-box; /* Ensures padding doesn't affect input width */
        }
        button {
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        table {
            width: 100%;
            margin-top: 20px;
            border-collapse: collapse; /* Collapsing borders */
            table-layout: fixed; /* Fixed layout to prevent column width issues */
        }
        table, th, td {
            border: 1px solid #ddd; /* Adding borders to the table, headers, and cells */
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f2f2f2;
        }
        td {
            white-space: nowrap; /* Prevent wrapping of cell content */
        }
        .bold {
            font-weight: bold;
        }
        .info {
            font-size: 14px;
            color: #555;
            margin-top: 5px;
        }
        .table-container {
            overflow-x: auto;
            margin-top: 20px;
        }

        /* Responsive Styles */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
                max-width: 100%;
            }

            input[type="number"], input[type="text"], button {
                padding: 8px;
                font-size: 14px;
            }

            table {
                font-size: 12px;
            }

            th, td {
                padding: 6px;
            }
        }

        @media (max-width: 480px) {
            table {
                font-size: 10px;
            }

            th, td {
                padding: 4px;
            }

            button {
                font-size: 16px;
            }

            input[type="number"], input[type="text"] {
                font-size: 14px;
                padding: 6px;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <h2>Solar Plant Revenue Calculator</h2>

        <label for="capacity">Capacity in MW:</label>
        <input type="number" id="capacity" placeholder="Enter plant capacity in MW" value="1" required>

        <label for="loanAmount">Loan Amount (₹):</label>
        <input type="text" id="loanAmount" placeholder="Loan amount" readonly>
        <p class="info">Formula: Loan Amount = 27,500,000 * Capacity in MW</p>

        <label for="unitGeneration">Unit Generation per Day / 1 MW (kWh):</label>
        <input type="number" id="unitGeneration" placeholder="Enter unit generation per day per MW" value="4500" required>

        <label for="energyOutput">Energy Output per Year (kWh):</label>
        <input type="text" id="energyOutput" placeholder="Energy Output per Year" readonly>
        <p class="info" id="energyOutputFormula">Formula: Energy Output per Year = Unit generation per day * (Capacity in MW + (Capacity in MW * 25%)) * 365</p>

        <label for="interestRate">Annual Interest Rate (%):</label>
        <input type="number" id="interestRate" placeholder="Enter interest rate" value="11" step="0.1" required>

        <label for="loanTerm">Loan Term (Years):</label>
        <input type="number" id="loanTerm" placeholder="Loan Term (Always 10 years)" value="10" disabled>

        <label for="pricePerKWh">Price per kWh (₹):</label>
        <input type="number" id="pricePerKWh" placeholder="Enter price per kWh" value="3.11" step="0.01" required>

        <label for="expenses">Annual Operational Costs (₹) in 1st year:</label>
        <input type="number" id="expenses" placeholder="Enter annual operational costs for the 1st year" value="500000" required>

        <button onclick="calculateRevenue()">Calculate Revenue</button>

        <div id="resultTable" class="table-container"></div>
    </div>

    <script>
        // Function to format numbers into Indian currency format with commas and ₹ symbol
        function formatCurrency(amount) {
            return '₹ ' + amount.toLocaleString('en-IN');
        }

        // Function to calculate and update Loan Amount and Energy Output per Year
        function updateLoanAndEnergyOutput() {
            const capacity = parseFloat(document.getElementById("capacity").value);
            const unitGeneration = parseFloat(document.getElementById("unitGeneration").value);

            // Calculate Loan Amount
            const loanAmount = 27500000 * capacity;
            document.getElementById("loanAmount").value = formatCurrency(loanAmount);  // Update loan amount field

            // Calculate Energy Output per Year
            const yearlyEnergyOutput = unitGeneration * (capacity + (capacity * 0.25)) * 365; // Adjusted for Energy Output per Year
            document.getElementById("energyOutput").value = Math.round(yearlyEnergyOutput);  // Update energy output field

            // Update the energy output formula dynamically
            const energyFormula = `Formula: Energy Output per Year = Unit generation per day * (${capacity} + (${capacity} * 25%)) * 365`;
            document.getElementById("energyOutputFormula").textContent = energyFormula;
        }

        // Function to calculate and display energy output and revenue
        function calculateRevenue() {
            // Get input values
            const capacity = parseFloat(document.getElementById("capacity").value);
            const unitGeneration = parseFloat(document.getElementById("unitGeneration").value);
            const loanAmountPerMW = 27500000; // Fixed loan amount per 1 MW
            const interestRate = parseFloat(document.getElementById("interestRate").value) / 100;
            const loanTerm = 10;  // Loan term fixed to 10 years
            const pricePerKWh = parseFloat(document.getElementById("pricePerKWh").value);
            let expenses = parseFloat(document.getElementById("expenses").value);

            if (isNaN(capacity) || isNaN(unitGeneration) || isNaN(loanAmountPerMW) || isNaN(interestRate) || isNaN(pricePerKWh) || isNaN(expenses)) {
                alert("Please fill in all fields with valid numbers.");
                return;
            }

            // EMI calculation using the EMI formula (fixed for 10 years)
            const loanAmount = loanAmountPerMW * capacity;
            const monthlyInterestRate = interestRate / 12;
            const months = loanTerm * 12;
            const emi = (loanAmount * monthlyInterestRate * Math.pow(1 + monthlyInterestRate, months)) / (Math.pow(1 + monthlyInterestRate, months) - 1);

            // Create a table to display the results
            let resultHtml = "<h3>Yearly Revenue Breakdown (for 25 Years)</h3>";
            resultHtml += "<table><tr><th>Year</th><th>Units Generated (↓ 0.8%/year)</th><th>Revenue</th><th>Annual Operational Costs (6% ↑/year)</th><th>Fixed EMI Payments</th><th>Total Costs</th><th>Total Savings</th></tr>";

            const totalEmiPerYear = emi * 12;  // EMI paid annually
            let totalEmiPaid = 0;

            let unitsGeneratedFirstYear = unitGeneration * (capacity + (capacity * 0.25)) * 365; // Units Generated for the first year

            for (let year = 1; year <= 25; year++) {
                // For the 2nd year onwards, apply 6% annual increase in Operational Costs
                if (year > 1) {
                    expenses = expenses * 1.06; // Increase by 6% annually
                }

                // For the 2nd year onwards, apply 0.8% degradation in Units Generated
                let currentUnitsGenerated = year === 1 ? unitsGeneratedFirstYear : unitsGeneratedFirstYear * Math.pow(0.992, year - 1); // 0.8% degradation per year

                // Calculate revenue for each year
                const revenue = currentUnitsGenerated * pricePerKWh; // Revenue = Units Generated * Price per kWh

                // For the first 10 years, EMI is paid
                let fixedEmiPayment = (year <= 10) ? totalEmiPerYear : 0;  // Fixed EMI Payments only for the first 10 years

                // Total Costs: Annual Operational Costs + Fixed EMI Payments
                const totalCosts = expenses + fixedEmiPayment;  // Total Costs = Operational Costs + EMI Payments
                const totalSavings = revenue - totalCosts;  // Total Savings = Revenue - Total Costs

                resultHtml += `<tr>
                    <td>${year}</td>
                    <td>${Math.round(currentUnitsGenerated)}</td>
                    <td>${formatCurrency(Math.round(revenue))}</td>
                    <td>${formatCurrency(Math.round(expenses))}</td>
                    <td>${year <= 10 ? formatCurrency(Math.round(fixedEmiPayment)) : "₹ 0"}</td>
                    <td class="bold">${formatCurrency(Math.round(totalCosts))}</td>
                    <td class="bold">${formatCurrency(Math.round(totalSavings))}</td>
                </tr>`;
            }
            resultHtml += "</table>";

            // Show the result table
            document.getElementById("resultTable").innerHTML = resultHtml;
        }

        // Update values when Capacity or Unit Generation is changed
        window.onload = function() {
            updateLoanAndEnergyOutput();
            calculateRevenue();  // Generate table on page load

            // Attach event listener to Capacity field to update values on change
            document.getElementById("capacity").addEventListener("input", () => { 
                updateLoanAndEnergyOutput();
                calculateRevenue(); 
            });

            // Attach event listener to Unit Generation field to update values on change
            document.getElementById("unitGeneration").addEventListener("input", () => { 
                updateLoanAndEnergyOutput();
                calculateRevenue(); 
            });

            // Attach event listener to other fields to update the values on change
            document.getElementById("interestRate").addEventListener("input", calculateRevenue);
            document.getElementById("pricePerKWh").addEventListener("input", calculateRevenue);
            document.getElementById("expenses").addEventListener("input", calculateRevenue);
        };
    </script>

</body>
</html>
